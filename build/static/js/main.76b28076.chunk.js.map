{"version":3,"sources":["card.js","games.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","matchedButton","matched","num","className","onClick","nextboard","board","slice","nextmatched","opentile","hiddencards","setOpentile","setBoard","setSecondsel","setFirstsel","setPrevnum","firstsel","console","log","prevnum","secondsel","setMatched","prev","x","length","Game","useEffect","sort","Math","random","i","tiles","useState","Array","fill","cardlist","map","item","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.76b28076.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { resetWarningCache } from \"prop-types\";\r\n\r\nfunction Card(props){\r\n\tlet matchedButton = \"tilebutton\";\r\n\r\n\tfunction clickimg() {\r\n\t\tconst nextboard = props.board.slice();\r\n\t\tconst nextmatched = props.matched.slice();\r\n\r\n\t\tif(props.opentile === 0) {\r\n\t\t\tnextboard[props.num] = props.hiddencards[props.num];\r\n\t\t\tprops.setOpentile(1);\r\n\t\t\tprops.setBoard(nextboard);\r\n\t\t\tprops.setSecondsel(\"2\");\r\n\t\t\tprops.setFirstsel(props.hiddencards[props.num]);\r\n\t\t\tprops.setPrevnum(props.num);\r\n\t\t} \r\n\r\n\t\telse if (props.opentile === 1) {\r\n\t\t\tnextboard[props.num] = props.hiddencards[props.num];\r\n\t\t\t\r\n\t\t\tprops.setBoard(nextboard);\r\n\t\t\tprops.setSecondsel(props.hiddencards[props.num]);\r\n\t\t\t if (props.firstsel === props.hiddencards[props.num]){\r\n\t\t\t \tconsole.log(\"MATCHED \"+ props.num + \"   \" + props.prevnum);\r\n\t\t\t \tnextmatched[props.num] = true;\r\n\t\t\t\tnextmatched[props.prevnum] = true;\r\n\t\t\t }\r\n\t\t\t//props.setFirstsel(\"ll\");\r\n\t\t\tconsole.log(props.firstsel + \"   -4  \" + props.secondsel);\r\n\t\t\tprops.setMatched(nextmatched);\r\n\t\t\tprops.setOpentile(2);\r\n\t\t} \r\n\t\t\r\n\t\telse if (props.opentile ===2) {\r\n\t\t\t//console.log(props.board);\r\n\t\t\tprops.setSecondsel(\"2\");\r\n\t\t\tprops.setFirstsel(props.hiddencards[props.num]);\r\n\t\t\tprops.setPrevnum(props.num);\r\n\t\t\tprops.setOpentile(1);\r\n\t\t\tprops.setBoard((prev)=>{\r\n\t\t\t\tfor(let x = 0; x < prev.length; x++){\r\n\t\t\t\t\tif(x===props.num){\r\n\t\t\t\t\t\tprev[x] = props.hiddencards[props.num];\r\n\t\t\t\t\t} else{\r\n\t\t\t\t\t\tif(!props.matched[x])\t{\r\n\t\t\t\t\t\tprev[x] = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn prev;\r\n\t\t\t})\r\n\t\t\tconsole.log(props.firstsel + \"   -4  \" + props.secondsel);\r\n\t\t\t//console.log(props.board);\r\n\t\t}\r\n\t\tconsole.log(props.matched);\r\n\t}\r\n\r\n\tif (props.matched[props.num])\r\n\t{\r\n\t\tmatchedButton = \"tilematchbutton\";\r\n\t}\r\n\r\n\treturn (<div \r\n\t\t\t\tclassName=\"tile\" \r\n\t\t\t\tonClick={clickimg}\r\n\t\t\t\t>\r\n\t\t\t\t\r\n\t\t\t\t<button className={matchedButton}>\r\n\t\t\t\t\t{props.board[props.num]}\r\n\t\t\t\t</button>\r\n\t\t\t\r\n\t\t\t</div>)\r\n}\r\n\r\n\r\nexport default Card\r\n\r\n\t// function wait(ms){\r\n\t// \tvar start = new Date().getTime();\r\n\t// \tvar end = start;\r\n\t// \twhile(end < start + ms) {\r\n\t// \t  end = new Date().getTime();\r\n\t//    }\r\n\t//  }\r\n\r\n\r\n\t\t\t// if ((!nextile[props.day]))\r\n\t\t// {\r\n\t\t// \tconsole.log(\"here\");\r\n\t\t// \tconsole.log(props.opentile);\r\n\t\t// \tif(props.opentile === 0) {\r\n\t\t// \t\tconsole.log(\"a\");\r\n\t\t// \t\tnextile[props.day] = true;\r\n\t\t// \t\tnextboard[props.day] = \"OO\"\r\n\t\t// \t\t//props.lab = props.day;\r\n\t\t// \t\tprops.setVisible(nextile);\t\r\n\t\t// \t\tprops.setBoard(nextboard);\r\n\t\t// \t\tprops.setOpentile(1); \r\n\t\t// \t}\r\n\t\t// \tif(props.opentile === 1) {\r\n\t\t// \t\tconsole.log(\"b\");\r\n\r\n\t\t// \t\tconst nextboard = props.board.slice();\r\n\t\t// \t\tnextboard[props.day] = \"OO\";\r\n\t\t// \t\tprops.setBoard(Array(props.tiles).fill(null));\r\n\t\t// \t\t//reset(); \r\n\t\t// \t\tprops.setOpentile(0);\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t// \t\tconsole.log(\"endd\");\r\n\t\t// \t\t//props.setBoard(Array(props.tiles).fill(null));\r\n\t\t// \t}\r\n\t\t// }\r\n","import React, {useState, useEffect} from \"react\"\r\nimport Card from \"./card\"\r\n\r\nlet hiddencards = [\"A1\", \"A1\",\r\n\t\"B2\",\"B2\",\r\n\t\"C3\",\"C3\",\r\n\t\"D4\",\"D4\",\r\n\t\"E5\",\"E5\",\r\n\t\"F6\",\"F6\",\r\n\t\"G7\",\"G7\",\r\n\t\"H8\",\"H8\",\r\n\t\"I9\",\"I9\",\r\n\t\"J10\",\"J10\",\r\n\t\"K11\",\"K11\",\r\n\t\"L12\",\"L12\",\r\n\t\"M13\",\"M13\",\r\n\t\"N14\",\"N14\",\r\n\t\"O15\",\"O15\",\r\n]\r\n\r\n\r\n\r\n\r\nfunction Game(props){\r\n\r\n\tfunction shuffle(array) {\r\n\t\tarray.sort(() => Math.random() - 0.5);\r\n\t  }\r\n\r\n\tuseEffect(() => {\r\n\r\n\t\tconsole.log(\"Mount\");\r\n\t\tshuffle(hiddencards);\r\n\t\tconsole.log(hiddencards);\r\n\t\t\r\n\t}, []);\r\n\r\n\r\n\r\n\tconst num = []\t\r\n\tfor(let i=0; i<=props.tiles-1; i++){\r\n\t\tnum[i]= i;\r\n\t}\t\r\n\tconst [board, setBoard] = useState(()=>Array(props.tiles).fill(null));\r\n\tconst [matched, setMatched] = useState(()=>Array(props.tiles).fill(false));\r\n\tconst [opentile, setOpentile] = useState(0);\r\n\tconst [firstsel, setFirstsel] = useState(\"1\");\r\n\tconst [secondsel, setSecondsel] = useState(\"2\");\r\n\tconst [prevnum, setPrevnum] = useState(-1);\r\n\t\r\n\r\n\r\n\tconst cardlist = num.map(item => \r\n\t\t\t\t<Card \r\n\t\t\t\tnum={item} \r\n\t\t\t\tboard={board}\r\n\t\t\t\tsetBoard={setBoard}\r\n\t\t\t\tmatched={matched}\r\n\t\t\t\tsetMatched={setMatched}\r\n\t\t\t\topentile={opentile}\r\n\t\t\t\tsetOpentile={setOpentile}\r\n\t\t\t\thiddencards={hiddencards}\r\n\t\t\t\tfirstsel={firstsel}\r\n\t\t\t\tsecondsel={secondsel}\r\n\t\t\t\tsetFirstsel={setFirstsel}\r\n\t\t\t\tsetSecondsel={setSecondsel}\r\n\t\t\t\tprevnum={prevnum}\r\n\t\t\t\tsetPrevnum={setPrevnum}\r\n\t\t\t\t/>)\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"Game\" >\r\n\t\t\t\t<div className=\"title\">Guess</div>\r\n\t\t\t\t{cardlist}\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\nexport default Game\r\n\r\n\r\n\r\n","import React from 'react';\nimport Game from './games';\nimport './App.css';\nimport './stylesheet.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App borderR\">\n        <div className= \"main-title\">Memory Game</div>\n        <div className=\" borderC\"> \n\n          <Game tiles={30} />\n\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}